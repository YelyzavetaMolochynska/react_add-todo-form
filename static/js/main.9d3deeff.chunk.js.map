{"version":3,"sources":["api/users.ts","api/todos.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","TodoInfo","todo","user","className","classNames","href","TodoList","todos","map","React","memo","initialData","todosFromServer","usersFromServer","find","App","useState","titleError","setTitleError","selectError","setSelectError","newTitle","setNewTitle","selectedUserId","setSelectedUserId","todosForRender","setTodos","action","method","onSubmit","event","preventDefault","newTodo","Math","max","updatedTodos","push","todoUpdater","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d3deeff.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo: {\n    id,\n    title,\n    completed,\n    user,\n  },\n}) => {\n  return (\n    <article\n      key={id}\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {user && (\n        <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n          {user.name}\n        </a>\n      )}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nconst TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} />\n      ))}\n    </section>\n  );\n};\n\nexport default React.memo(TodoList);\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\nimport TodoList from './components/TodoList/TodoList';\n\nconst initialData = () => {\n  return (\n    todosFromServer.map((todo) => {\n      return ({\n        ...todo,\n        user: usersFromServer\n          .find((user: User) => user.id === todo.userId) || null,\n      });\n    })\n  );\n};\n\nexport const App = () => {\n  const [titleError, setTitleError] = useState(false);\n  const [selectError, setSelectError] = useState(false);\n  const [newTitle, setNewTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState('');\n  const [todosForRender, setTodos] = useState(initialData);\n\n  const todoUpdater = () => {\n    const maxId = Math.max(...todosForRender.map(({ id }) => id), 0);\n\n    const newTodo: Todo = {\n      id: (maxId + 1),\n      title: newTitle,\n      completed: false,\n      userId: +selectedUserId,\n      user: usersFromServer\n        .find((user: User) => user.id === +selectedUserId) || null,\n    };\n\n    const updatedTodos = todosForRender.map(todo => ({ ...todo }));\n\n    updatedTodos.push(newTodo);\n\n    setTodos(updatedTodos);\n    setNewTitle('');\n    setSelectedUserId('');\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!newTitle) {\n      setTitleError(true);\n    }\n\n    if (!selectedUserId) {\n      setSelectError(true);\n    }\n\n    if (selectedUserId && newTitle) {\n      todoUpdater();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            Title:\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={newTitle}\n              onChange={(event) => {\n                setNewTitle(event.target.value);\n                setTitleError(false);\n              }}\n            />\n          </label>\n          {titleError && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            User:\n            <select\n              data-cy=\"userSelect\"\n              value={selectedUserId}\n              onChange={(event) => {\n                setSelectedUserId(event.target.value);\n                setSelectError(false);\n              }}\n            >\n              <option value=\"\" disabled>Choose a user</option>\n              {usersFromServer.map(user => (\n                <option\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n          {selectError && (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todosForRender} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}